package.json is a file in your application that contains meta-data about your application. One of the most well-known parts of package.json is the dependencies that will be installed into a node_modules folder when you run npm install. Dependencies can be added into package.json manualy by opening the file and listing them into the dependencies object or by using the <npm install *bluebird* --save> syntax or <npm install *bluebird* --save-dev >for development only dependencies. 
But package.json contains far more information than just dependencies. And an easy way to create your package.json file will help you fill out these important pieces. Running <npm init> in your application folder will walk you through filling out the information your package.json will contain. <npm init> will prompt you for a name, version number, git repository, entry point and some other info. Entry point is the next topic we will cover. 
In npm init entry point will be assigned to "main" in your package json. This is the file that will run when you navigate to your application folder and type node or nodemon. 
If you have hit enter and accepted the defaults npm init provides your "main" will have a value of "index.js".
If you fail to create an index.js available directly inside your application folder (not inside any sub-folders) node will error. 
There are 2 solutions to this, the first is to make sure your package.json "main" reflects the name and location of the file you want to run as an entry point to your application, the other is to use a build tool such as Grunt to specify the name and location of that file and only start your appication via grunt. Just be aware that leaving an invalid value in your package.json means that anytime anyone attempts to start your app with node directly they will get an error.
